FUNCTION_BLOCK "Shift_Math_Driver_v2"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
   VAR_INPUT 
      in_CamEdge { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : "CamAxis";
      in_CamCorner { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : "CamAxis";
      in_rYfull { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Real;
      in_rXfull { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Real;
      in_rYShiftEdge { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Real;
      in_rYShiftCorner { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Real;
      in_rXShiftCorner { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Real;
   END_VAR

   VAR_OUTPUT 
      out_diA { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : DInt;
      out_diX { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : DInt;
      out_diY { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : DInt;
   END_VAR

   VAR 
      CamData { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Struct
         rX1 { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Real;
         rX2 { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Real;
         rY2 { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Real;
      END_STRUCT;
      CalcData { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Struct
         rYDistBetweenCam { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Real;
      END_STRUCT;
      A { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Struct
         rTangens { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Real;
         rRadian { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Real;
         rDegree { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Real;
         rOffset { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Real;
      END_STRUCT;
      X { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Struct
         rAverage { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Real;
         rCorrectiveEdge { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Real;
         rCorrectiveCorner { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Real;
         rCorrectiveFull { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Real;
         rCalc { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Real;
         rOffset { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Real;
      END_STRUCT;
      Y { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Struct
         rAverage { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Real;
         rCorrective { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Real;
         rCalc { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Real;
         rOffset { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Real;
      END_STRUCT;
   END_VAR


BEGIN
	REGION Discription
	(*
	         ---+------------------------------------------------------------+ 
	         ᐱ  |                                                            |
	         |  |                                                            |
	         |  |                                                            |
	         |  |                                                            |
	         |  |                                                            |
	         |  |                                                            |
	         |  |                                                            |
	  rXfull |  |                                                            |
	         |  |                                                            |
	         |  |                                                            |
	         |  |                           rYfull                           |
	         |  |<---------------------------------------------------------->|--
	         |  |                                                            | ᐱ
	         |  |                                                            | |
	         |  |                                                            | rXshiftCorner
	         |  |                                                            | |
	         ᐯ  |               |                          |                 | ᐯ
	         ---+---------------|--------------------------|-----------------+--
	            |<-rYshiftEdge->|<------rYBetweenCam------>|<-rYshiftCorner->|              
	*)
	END_REGION
	
	REGION Расчет дополнительных переменных
	    #CalcData.rYDistBetweenCam := #in_rYfull - #in_rYShiftEdge - #in_rYShiftCorner;     //Растояние между камерами
	END_REGION
	
	REGION Расчет смещений
	    //Расчет смещения угла A (ОК)
	    #A.rTangens := (#in_CamEdge.rX - #in_CamCorner.rX) / #CalcData.rYDistBetweenCam;    // Calculate Tangens Degree tn(A)
	    #A.rRadian := ATAN(#A.rTangens);                                                    // Calculate A in Radian
	    #A.rDegree := #A.rRadian * 180 /"rPi";                                              // Calculate A in Degree
	
	    //Расчет смещения Х
	    #X.rAverage := (#in_CamEdge.rX + #in_CamCorner.rX) / 2;                                                                 // Calculation of the Average Offset without rotation
	    #X.rCorrectiveEdge :=(#in_rYfull / 2 - #in_rYShiftEdge - #in_rXfull / 2 * TAN(#A.rRadian / 2)) * TAN(#A.rRadian);       // Calculation Edge rotation corrective
	    #X.rCorrectiveCorner :=(#in_rYfull / 2 - #in_rYShiftCorner + #in_rXfull / 2 * TAN(#A.rRadian / 2)) * TAN(#A.rRadian);   // Calculation Corner rotation corrective
	    #X.rCorrectiveFull := (#X.rCorrectiveEdge - #X.rCorrectiveCorner) / 2;                                                  // Calculation Full rotation corrective
	    #X.rCalc := #X.rAverage + #X.rCorrectiveFull;                                                                           // Calculation of the Average Offset with rotation
	    
	    //Расчет смещения Y
	    #Y.rAverage := #in_CamCorner.rY;                                                                                    // Calculation of the Average Offset without rotation
	    #Y.rCorrective := (#in_rXfull / 2 - #in_rXShiftCorner - #in_rYfull / 2 * TAN(#A.rRadian / 2)) * TAN(#A.rRadian);    // Calculation of the Rotation Offset
	    #Y.rCalc := #Y.rAverage - #Y.rCorrective;                                                                           // Calculation of the Average Offset with rotation
	END_REGION
	
	REGION Применение min|max к расчетным значениям
	    #A.rOffset := LIMIT(MN := -2, IN := #A.rDegree, MX := 2);    // Limit Angle
	    #X.rOffset := LIMIT(MN := -70, IN := #X.rCalc, MX := 70);    // Limit Axis X
	    #Y.rOffset := LIMIT(MN := -70, IN := #Y.rCalc, MX := 70);    // Limit Axis Y
	END_REGION
	
	REGION Доп. Преобразование
	    #A.rOffset := #A.rOffset * (-100);  // Multiply by -100
	    #Y.rOffset := #Y.rOffset * (-1);    // Multiply by -1
	END_REGION
	
	REGION Записываем выход
	    #out_diX := REAL_TO_DINT(#X.rOffset);
	    #out_diY := REAL_TO_DINT(#Y.rOffset);
	    #out_diA := REAL_TO_DINT(#A.rOffset);
	END_REGION
	
END_FUNCTION_BLOCK
